//Video_Dif_Ch_Av15_Angle _MTI-T1-3
clear_variables();
//path_t="C:\multitarget_data\Indoor\Fred-2021-03-05_16_2_2_2\TX_board_grey_16-2-2\test_389-T1-T2-T3-0_radom_udal_pribl.sig";
//path_t="C:\multitarget_data\Indoor\Fred-2021-03-05_16_2_2_2\TX_board_grey_16-2-2\test_390-T1-T2-T3-0_radom_cross.sig";
//path_t="C:\multitarget_data\Indoor\Fred-2021-03-10-16-2-2-2_green_stenka_2man\test_402-T1-T2-T3-T4-0_radom_1nobreath_1udal_pribl.sig";
path_t="C:\multitarget_data\Indoor\Fred-2021-03-05_16_2_2_2\TX3_board_green_16-2-2-2\test_395-T1-T2-T3-T4-0_radom_cross.sig";
path_t = "C:\multitarget_data\0521wall-tests\test_469-breath.sig";
//path_t = "C:\multitarget_data\06 01 tests\1.7 meters\standing_side_with_grate.sig";
path_t = "C:\multitarget_data\07-22 tests\3_1.sig";
//path_t = "C:\Users\matve\Desktop\Geozondas\04\25032021_green_wall\test_434-T1-T2-T3-T4-0_2man_2dist_breath.sig";
pathW="C:\multitarget_data\FRED\Kaizer.sig";
//pathW="C:\Users\matve\Desktop\Geozondas\04\Kaizer.sig";

//Parameteres from hardware
Nch = 8;                    // Number of Rx
N = 1024;                  // Nuber of input points in each channel
c = 0.3;                    // Light velocity, m/ns
freq0 = 3.1;               // Start frequency, GHz
freqMax = 3.6;           // Stop frecuency, GHz
d = 0.061;                 // MIMO array step, m
RxAz = 5;                  //Number of Rx for Az
RxEl = 4;                    //Number of Rx for El

//Parameters from designer
K = 1;                        // Number of Tx (columns in mt matrix)
T = 10;                      // Chirp duration, ms
P = 1;                        // Chirp pause duration, ms
Mn = 12;                    // Range padding window power
Alfa = 0.1;                  // Avereging filter coefficient
perFrame = 16;            // Number of chirps in frame for velosity calculation
//requiredAmpl = 2;	        // Minmum amplitude of spectrum extremums
//requiredRise = 0.1;       // of spectrum, mV per point
scoreThreshold = 4;      // of channels spectrum maksimums positions  intersections
TagscoreThreshold =7;  // of chirps avereged MTI specbitsrums intersections in frame
dopplerPadding = 128;   // doppler padding window number
Azpadding= 128;	         // azimuth angle padding window number
Elpadding= 128;	         // elevation angle padding window number
Nor=2^15;	                 // Signal amplitude nor
NoiseLevel = 0.25;        // FaLse maximums level
dMinLevel = 0.2;          // FaLse adjacent minimum level
MinRise = 0.01;             // FaLse rise level
breathingHistSamples = 32; // How many points there can be in the histogram for current distance
breathingHistRequired = 10; // How many points are needed to calculate the histogram
azHistMaxAngle = 52; // Maximum displacements from the boresight for the evalaution of angle histogram, degrees
azHistStep = 2; // Angle step in the angle histogram, degrees
elHistMaxAngle = 52; // Maximum displacements from the boresight for the evalaution of angle histogram, degrees
elHistStep = 2; // Angle step in the angle histogram, degrees
coordMemorySize = 7; // How many coordinate measurements should be averaged to get a final value

//GUI parametes
Range = 30;                  // m
Az = 1;                   // To measure Azimuth   (1,0)
El =  1;                  //To measure Elevation   (1,0), Az & El shall not be 0 simultaniously
throughWall = 0;
TxNum=4;              // Number 0f Tx antennas (3, 4 optional);
txToUse = 3;

// Research parameters
requiredAngleSimilarity = 10; // Degrees
checkBreathing = false;
breathCheckStartPoint = 20;
displayBreathingSlowTimeAt = 9; // Relative to breathCheckStartPoint
breathCheckEndPoint = 60;
breathingPeriod = 64; // Of slow samples (frames). This is used for method 1 (based on Doppler velocities)
breathingPeriod2 = 256; // Of slow samples. This is used for method 2 (based on amplitudes)
breathSkips = 4; // How many signals there are in a breathing frame for method 2
breathingSpectrumMagnitude = 80; // What is considered large enough spectrum value

// Position of each TX in the array
TX_pos = signal(1, 4, false);
TX_pos[0] = 1; // TX 1
TX_pos[1] = 0; // TX 2
TX_pos[2] = 3; // TX 3
Tx_pos[3] = 2; // TX 4
txesSelected = 0;
for (index = 0; index < 4; index = index + 1)
{
	if (TX_pos[index] >= 0)
	{
		txesSelected = txesSelected + 1;
	}
}

if (txesSelected != TxNum)
{
	print_line("Won't run. TxNum does not match the number of selected tx in the TX_pos array");
	goto justend;
}

TxAz = 2; // By the definition
TxEl = 1; // By the definition
if (TX_pos[0] < 0)
{
	print_line("Won't run. 1st tx should always be present");
	goto justend;
}
if (TX_pos[1] < 0)
{
	print_line("Won't run. 2nd tx should always be present");
	goto justend;
}

//which tx in the switching order maps to which azimuth location (the 3rd tx is cosidered the last one in azimuth)
TxMapping = signal(1, TxNum, false);
TxMapping = -1; //We should clearly fail

TxMapping[Tx_pos[0]] = 1; //TX1 maps to the second azimuth location
TxMapping[Tx_pos[1]] = 0; //TX2 maps to the first azimuth location

if (TX_pos[2] >= 0)
{
	TxEl = 2;
	TxMapping[Tx_pos[2]] = 3; //TX3 maps to the last azimuth location, or non-azimuth to be more exact
}

if (TX_pos[3] >= 0)
{
	TxAz = 3;
	TxMapping[Tx_pos[3]] = 2; //TX4 maps to the third azimuth location, the last actual azimuth
}

print_line("The switching order is:");
for (index = 0; index < TxNum; index = index + 1)
{
	if (TxMapping[index] != -1)
	{
		print_line(index, " antenna to be switched on goes to ", TxMapping[index], " location in azimuth axis (3 is non-azimuth).");
	}
}

TxAz = 2;
out(TxAz);
out(TxEl);

//Device tuning parameters
startDelay=0.35;               // m
Ch = 4;                          // Velosity measuring channel number = 2. C0hanging Ch see rows 180 - 187

//Tracking low level params
maxTracks = 20;
maxData = 40;

numOfTracks = 0;
timestamps = signal(1, maxTracks, false);

//state of tracks
//x11 = signal(1, maxTracks, false);
//x21 = signal(1, maxTracks, false);
//x31 = signal(1, maxTracks, false);
//x41 = signal(1, maxTracks, false);
states = matrix(maxTracks, 6); //including elevation
states = 0;

//covariances of tracks
covariances = matrix(maxTracks * 6, 6); //6 rows at a time is for a single 6x6 covar matrix
covariances = 0;

thresholds = signal(1, maxTracks, false);
ages = signal(1, maxTracks, false);
isValidatedArray = signal(1, maxTracks, false);
idsTracks = signal(1, maxTracks, false);
idsTracks = 0;
lastTrackId = 0;

rData = signal(1, maxData, false);//array of distances
vData = signal(1, maxData, false);//array of velocities
aData = signal(1, maxData, false);//array of az angles
eData = signal(1, maxData, false);//array of el angles
isUsedData = signal(1, maxData, false);
isMatchedData = signal(1, maxData, false);
idsData = signal(1, maxData, false);

timestamps = 0;
//end of tracking low level params

//Tracking high level params
trueTrackThreshold = 0.8;
maxVel = 2;//m/s
minVel = 0.1;//m/s
minAgeToDisplayRadial = 2;//track with mostly radial movement needs to be updated for this amount of frames to be displayed
minAgeToDisplayTangental = 4;//track with mostly tangental movement needs to be updated for this amount of frames to be displayed
//end of tracking igh level params

//Tracks history for the averaging
maxNumOfTraces = maxTracks; // It may be different
curNumOfTraces = 0;
rHistory = matrix(maxNumOfTraces, coordMemorySize + 1); // +1 to avoid bund check
vHistory = matrix(maxNumOfTraces, coordMemorySize + 1);
azHistory = matrix(maxNumOfTraces, coordMemorySize + 1);
elHistory = matrix(maxNumOfTraces, coordMemorySize + 1);
measurementsInMemory = signal(1, maxNumOfTraces, false);
memoryUpdatedFlags = signal(1, maxNumOfTraces, false); // To remove old traces
idsInMemory = signal(1, maxNumOfTraces, false);

rHistory = 0;
vHistory = 0;
azHistory = 0;
elHistory = 0;
measurementsInMemory = 0;
idsInMemory = 0;
//end of tracks history

//Calculated parameters
Tc =T+P;                       // Chirp period, ms
Tf = Tc*perFrame/1000;   // Frame period, s
Nn = pow(2,Mn);           // Padding window number
dT = T/N;                    // Time step
Tn = dT*Nn;                // Padding window duration, ms
B = freqMax - freq0;      // Bandwidth
slope = B/(T/1000);       //0.5 GHz/10 ms
deltaf = 1/(T/1000);      //Hz,   original IF delta
distPerPoint = deltaf*c/2/slope*N/Nn; //m
pointsToView = ceil(Range/distPerPoint)+2;
totalDistance = distPerPoint*(N/2+1);
lambda0 = c/freq0;
domega = 2*pi()/dopplerPadding;
dvel = lambda0*domega/4/pi()/Tc*1000;
dsinAz =c/(freq0*Azpadding*d);
dsinEl = c/(freq0*Elpadding*d);

breathingDeltaT = Tc * (perFrame + 2 * (TxNum - 1)) / 1000; // Same as the frame period but with all tx switching included, s
breathingWindow = breathingPeriod*breathingDeltaT; // seconds
breathingDeltaF = 1/breathingWindow; // Hz
breathingWindow2 = breathingPeriod2 * Tc * breathSkips / 1000; // seconds
breathingDeltaF2 = 1/breathingWindow2; // Hz
checkBreathingPoints = breathCheckEndPoint - breathCheckStartPoint + 1;
breathMat = matrix(breathingPeriod, checkBreathingPoints);
breathAmplitudes = signal(1, checkBreathingPoints, false);
breathMat = 0;
breathMat2 = matrix(breathingPeriod2, checkBreathingPoints);
breathAmplitudes2 = signal(1, checkBreathingPoints, false);
breathMat2 = 0;
spectrumMaximums = signal(1, checkBreathingPoints, false);

//kVmsa=6/(perFrame*(perFrame-1)*(2*perFrame-1)); //for mean-scuare approximated velocity calculation
MaximumsDelay=ceil(startDelay/distperpoint);        //Start delay number;

//Variables
// Don't used in this macros
//perBreathFrame = 64;
//breathingPeriod = 128;//of slow samples
//paddingRate = Nn/N;
//padAngleTo = 32;
//breathSkips = 8; //how many chirps are acquired before next brething sample
// Don't used in this macros
//breathingDeltaT = breathSkips*T/1000;//seconds per sample
//breathingWindow = breathingPeriod*breathingDeltaT;//seconds
//breathingDeltaF = 1/breathingWindow;//Hz
//breathingDeltaT = breathSkips*T/1000;//seconds per sample
//breathingWindow = breathingPeriod*breathingDeltaT;//seconds
//breathingDeltaF = 1/breathingWindow;//Hz
//dphase = 2*pi()/padAngleTo;

out(deltaf);
out(distPerPoint);
out(pointsToView);
out(paddingRate);
out(breathingWindow);
out(dvel);

ch_1 = signal(T,N,false);   // Channel 1 signal
ch_1=0; ch_2=ch_1; ch_3=ch_1; ch_4=ch_1; ch_5=ch_1;
ch_6=ch_1; ch_7=ch_1; ch_8 = ch_1;
ch_1Prev = ch_1;
ch_2Prev = ch_1;
ch_3Prev = ch_1;
ch_4Prev = ch_1;
ch_5Prev = ch_1;
ch_6Prev = ch_1;
ch_7Prev = ch_1;
ch_8Prev = ch_1;
SigZP_1=signal(Tn,Nn,false); //Zerrow padded signal of Cjhannel 1						                                                          //

ph2=signal(dopplerPadding,dopplerPadding,false); //Zerow padded phase for Doppler FFT
ph2=0;
phAz=signal(Azpadding,Azpadding,false); //Zerow padded phase for Azimuth angle FFT
PhAz=0;
phEl=signal(Azpadding,Azpadding,false); //Zerow padded phase for Azimuth angle FFT
PhEl=0;

s1=signal(T,N*Nch,false);
pos=0;
posAz=0;
posEl=0;

averagedMat = matrix(Nch,pointsToView);
averagedMat = 0;
averaged = signal(Tn,pointsToView,false);
averaged=0;
mean_sig = averaged;
histogramMatAz = matrix(breathingHistSamples, pointsToView);
histogramMatAz = -1000; //Invalid values
histogramMatEl = matrix(breathingHistSamples, pointsToView);
histogramMatEl = -1000; //Invalid values

histEntryAz = signal(10, pointsToView, false);
histEntryEl = signal(10, pointsToView, false);

histAz = signal(2*azHistMaxAngle, floor(2*azHistMaxAngle/azHistStep + 1), false);
histEl = signal(2*elHistMaxAngle, floor(2*elHistMaxAngle/elHistStep + 1), false);

hitTag = signal(dT*(pointsToView),pointsToView,false);
hitTag=0;
hitM=hitTag;
PadK=dopplerPadding/perFrame; // PadK=8
I8=signal(PadK,PadK,false);

// Here matrices only need to hold signals for the 1st tx
chMat=matrix(Nch * 4, N); // matrix to hold normalized signals
prevChMat=matrix(Nch * 4, N);
prevChMat=0;
difMat=matrix(Nch * 4, N);

hitMaximums=signal(Tn,pointsToView,false);
scoreMaximums=hitMaximums;

phaseMat = matrix(Nch*4, pointsToView); phaseMat=0;
phaseMatT = matrix(pointsToView,Nch);
phMatrix=matrix(perFrame * Nch,pointsToView);
phMatrixT=matrix(pointsToView,perFrame * Nch);
ph1Tag1=signal(perFrame,perFrame,false);
phtagx = signal(perFrame * Nch, perFrame, false);
//phTag1=signal(perFrame,perFrame,false);                                          //

//Signal matrix loading from disk
num=sig_get_count(path_t);
sigsPerFrame = perFrame + 2 * (TxNum - 1);
totalFrames = floor(num / sigsPerFrame);
Out(num);
ss1=matrix(sigsPerFrame, N*Nch*TxNum);
s1=signal(num,N*Nch*TxNum,false);

//Window function for range FFT
W=sig_read(pathW,0); // Kaizer window

//Window function for Doppler FFT
WH=signal(dopplerPadding*Tc,dopplerPadding,false);   //Hamming Window for Doppler FFT
WH=0;
For(i=0;i<perFrame;i=i+1)
{ WH[i]=0.54-0.46*cos(2*pi()*i/perFrame); }
//r13=WH;

WHel1 = signal(Elpadding, Elpadding, false);   //Hamming Window for elevation angle FFT
WHel1 = 0;
For(i=0; i < RxEl; i=i+1)
{ WHel1[i]=0.54-0.46*cos(2*pi() * i / Rxel); } // Hamming Window for azimuth angle FFT

WHel2 = signal(Elpadding*TxEl, Elpadding, false);   //Hamming Window for elevation angle FFT
WHel2 = 0;
For(i=0; i < RxEl; i=i+1)
{ WHel2[i]=0.54-0.46*cos(2*pi() * i / Rxel / TxEl); } // Hamming Window for azimuth angle FFT

//r13=WHel;

WHaz1=signal(Azpadding*TxAz,Azpadding,false);   //Hamming Window
WHaz1=0;
For(i=0; i<RxAz; i=i+1)
{ WHaz1[i]=0.54-0.46*cos(2*pi()*i/RxAz); }

WHaz2=signal(Azpadding*TxAz,Azpadding,false);   //Hamming Window
WHaz2=0;
For(i=0; i<RxAz*TxAz; i=i+1)
{ WHaz2[i]=0.54-0.46*cos(2*pi()*i/RxAz/TxAz); }

//r12=WHaz;
pause();

t1=time();
currentTime = 0;//used for tracker
frameIndex = 0;
breathSkipIndex = breathSkips - 1;

for (frameIndex = 0; frameIndex < totalFrames; frameIndex = frameIndex + 1)
{
	//The device is writing the new frame data
	for(ii=0; ii < sigsPerFrame; ii = ii + 1)
	{
		s1 = sig_read(path_t, frameIndex * sigsPerFrame + ii);
		set_matrix_row(ss1,ii,s1);
	}
	//New frame data is acquired
	ie = 0;

	for(ii = 0; ii < perFrame; ii = ii + 1)
	{
		s1 = get_matrix_row(ss1, ii) / Nor;
		for (chNum = 0; chNum < Nch; chNum = ChNum + 1)
		{
			for (i = 0; i < N; i = i + 1)
			{
				ch_1[i] = s1[i * Nch + chNum];
			}
			set_matrix_row(chMat, chNum, ch_1);

			if (chNum == Ch)
			{
				// sending ch_1 to GUI
			}
		}

		if ((ii == 0 ) and (frameIndex == 0))
		{
			if (throughWall == 1)
			{
				mean_sig = 0;
				// Combining all signals
				for (chNum = 0; chNum < Nch; chNum = chNum + 1)
				{
					cc1 = get_matrix_row(chMat, chNum);
					SigZP_1 = 0;
					Insert(cc1 * W, 0, N - 1, SigZP_1, 0);

					spectr_1 = fft(SigZP_1) / T; // Range FFT
					set_window(spectr_1, pointsToView * dT, pointsToView);
					mean_sig = mean_sig + mag(spectr_1);
				}

				// The maximum will be 1
				mean_sig = mean_sig / max(mean_sig, pos);
				for (i = 1; i < pointsToView - 1; i = i + 1)
				{
					if ((mean_sig[i + 1] < mean_sig[i]) and (i > MaximumsDelay))
					{
						// we found our maximum
						wallPoint = i;
						print_line("Delay in meters: ", wallPoint * distPerPoint);
						goto stopwallmax;
					}
				}
stopwallmax:

				for (i = wallPoint; i < pointsToView - 1; i = i + 1)
				{
					if (mean_sig[i + 1] > mean_sig[i])
					{
						MaximumsDelay = i;
						goto stopwallend;
					}
				}
stopwallend:
				pause();
			}
		}

		hitMaximums =0;
		hitTag=hitMaximums;
		difMat=chMat-prevChMat; //There are only valid changes for TX_pos[0]
//		prevChMat = chMat;
//		subtracking only up to 8th signal
		//if (frameIndex == 0 and ii <= 7)
		//{
			prevChMat=chMat;
		//}

		for (chNum = 0; chNum < Nch; chNum = chNum + 1)
		{
			cc1=get_matrix_row(difMat, chNum);

			SigZP_1=0;
			Insert(cc1*W,0,N-1,SigZP_1,0);

			spectr_1=fft(sigZP_1)/T;  //Range FFT
			set_window(spectr_1,pointsToView*dT,pointsToView);

			if (ie == perFrame - 1) //Store signals for the calculation of phases only during the last measurements
			{
				set_matrix_row(phaseMat, TxMapping[0]*Nch + chNum,phase(spectr_1)); // Store where the 1st tx (by the switching order) points
			}

			//spectr=fft(sigZP)/T; 	                                              //
			currentRangeSig=mag(spectr_1);
			averaged=get_matrix_row(averagedMat,chNum);
			averaged = (1-Alfa)*averaged+ Alfa* currentRangeSig;  // not rewriting averagedMat
			//r12 = averaged;
			set_matrix_row(averagedMat,chNum,averaged);
			//ie = ii - perFrame * floor(ii/perFrame);

			ph1 = phase(spectr_1);
			set_matrix_row(phMatrix, ie * Nch + chNum, ph1);

			if(chNum==Ch)
			{
				//r11=currentRangeSig; //MTI spectrum of ch1
				set_label(averaged, pointsToView/Tn,"kHz","mV"); //set_label(r11,(Nn/2+1)/Tn,"kHz","mV");
				r9=averaged;           //LPF of r11
				r8=currentRangeSig;
				
				if (checkBreathing) // Second method
				{
					if (breathSkipIndex == breathSkips - 1)
					{
						  cc1=get_matrix_row(chMat, chNum);

						  SigZP_1=0;
						  Insert(cc1*W,0,N-1,SigZP_1,0);

						  spectr_1=fft(sigZP_1)/T;  //Range FFT
						  set_window(spectr_1,pointsToView*dT,pointsToView);
						  breathTestSignal = mag(spectr_1);
						  
						  breathAmplitudes2 = 0;
						  for (rInd = breathCheckStartPoint; rInd <= breathCheckEndPoint; rInd = rInd + 1)
						  {
							    indexInBreath = rInd - breathCheckStartPoint;
							    breathAvgStart = rInd - 2;
							    if (breathAvgStart < 0)
							    {
								      breathAvgStart = 0;
							    }
							    breathAvgEnd = rInd + 2;
							    if (breathAvgEnd > N)
							    {
								      breathAvgEnd = N;
							    }
							    pointsOnAvgUsed = 0;
							    resultingBreathAmpl = 0;
							    for (rInd2 = breathAvgStart; rInd2 < breathAvgEnd; rInd2 = rInd2 + 1)
							    {
								      resultingBreathAmpl = resultingBreathAmpl + averaged[rInd];
								      pointsOnAvgUsed = pointsOnAvgUsed + 1;
							    }
							    //breathAmplitudes2[indexInBreath] = breathTestSignal[rInd];
							    breathAmplitudes2[indexInBreath] = resultingBreathAmpl / pointsOnAvgUsed;
						  }
						  
						  //Shifting previous breathing amplitude by one in slow time dimension
						  for (bInd = breathingPeriod2 - 1; bInd > 0; bInd = bInd - 1)
						  {
							    set_matrix_row(breathMat2, bInd, get_matrix_row(breathMat2, bInd-1));
						  }
						  //Rewriting 1st row with the latest data
						  set_matrix_row(breathMat2, 0, breathAmplitudes2);

						  //Transpose to calculate FFT along the slow time axis for each distance
						  breathMatTransposed2 = transpose(breathMat2);
						  draw(breathMatTransposed2);
						  
						  //Resetting the signal, in which we will keep spectrum maximums for all potential breathing points
						  spectrumMaximums = 0;
						  clearPeakFlags = spectrumMaximums;

						  for(rInd = 0; rInd < checkBreathingPoints; rInd = rInd + 1)
						  {
							    //The amplitude distribution of the breathing on the slow time axis
							    breathSlowTime = get_matrix_row(breathMatTransposed2, rInd);
							    
							    //To not have the garbage after the FFT need to set some time window
							    set_label(breathSlowTime, breathingWindow2, "s", "mV");
							    
							    //Breathing spectrum
							    breathSpectrum = mag(fft(breathSlowTime));
							    breathSpectrum[0] = 0;
							    
							    //The proper labels and the scale
							    set_label(breathSpectrum, 1/breathingWindow2*(breathingPeriod2/2+1), "Hz", "mV");
							    if (rInd == displayBreathingSlowTimeAt)
							    {
								      set_label(breathSlowTime, breathingWindow2, "s", "mV");
								      r16 = breathSlowTime; // For debugging
								      r15 = breathSpectrum;
							    }
							    
							    pos = 0;
							    pos2 = 0;
							    currentMaxValue = max(breathSpectrum, pos);
							    breathSpectrumCopy = breathSpectrum;
							    breathSpectrumCopy[pos] = 0;
							    currentMaxValue2 = max(breathSpectrumCopy, pos2);

							    //This is current policy of describing, what is the breathing spectrum
							    //Currently we only allow further tests if enough data is collected to fill breathing slow time buffer
							    if ((pos > 0) and (frameIndex * perFrame / breathSkips > breathingPeriod2)) //not a zero frequency 
							    {
								      sharpDropValue = 1;
								      limit = pos - 2;
								      if (limit < 0)
								      {
										limit = 0;
								      }
								      for (dropInd = pos; dropInd >= limit; dropInd = dropInd - 1)
								      {
										if (breathSpectrum[dropInd] < sharpDropValue*currentMaxValue)
										{
											  sharpDropValue = breathSpectrum[dropInd]/currentMaxValue;
										}
								      }
								      if (sharpDropValue > 0.65)
								      {
										limit = pos + 2;
										if (limit >= breathingPeriod/2 + 1)
										{
											  limit = breathingPeriod/2;
										}
										for (dropInd = pos; dropInd <= limit; dropInd = dropInd + 1)
										{
											  if (breathSpectrum[dropInd] < sharpDropValue*currentMaxValue)
											  {
												    sharpDropValue = breathSpectrum[dropInd]/currentMaxValue;
											  }
										}
								      }
								      if (sharpDropValue < 0.65)
								      {
										//Store this point, it could be local maximum along the distance axis
										//We don't know that untill all points around all checked
										spectrumMaximums[rInd] = currentMaxValue;
								      }
								      if (currentMaxValue > 4 * currentMaxValue2) // Clear peak
								      {
										spectrumMaximums[rInd] = currentMaxValue;
										clearPeakFlags[rInd] = 1;
								      }

							    }
						  }
						  //Now we can display the current breathing spectrum maximums distribution
						  //r16 = spectrumMaximums;
						  breathSkipIndex = 0;
						  numberOfBreathing = 0;
						  
						  for (rInd = 1; rInd < checkBreathingPoints-1; rInd = rInd + 1)
						  {
							    //Indices have to be explicit due to the bug in the array access
							    nextIndex = rInd + 1;
							    prevIndex = rInd - 1;
							    
							    //Looking for the local maximum, to avoid reporting many breathing points
							    if (spectrumMaximums[rInd] > spectrumMaximums[nextIndex])
							    {
								      if (spectrumMaximums[rInd] > spectrumMaximums[prevIndex])
								      {
										//It is the local maximum, but is it strong enough?
										if ((spectrumMaximums[rInd] > breathingSpectrumMagnitude) or (clearPeakFlags[rInd] > 0))
										{
											  //The same processing as before to have the breathing spectrum
											  breathSlowTime = get_matrix_row(breathMatTransposed2, rInd);
											  set_label(breathSlowTime, breathingWindow2, "s", "mV");
											  breathSpectrum = mag(fft(breathSlowTime));
											  breathSpectrum[0] = 0;
											  set_label(breathSpectrum, 1/breathingWindow2*(breathingPeriod2/2+1), "Hz", "mV");
											  
											  //Have the limited number of register to store first few breathing spectrums
											  if (numberOfBreathing == 0)
											  {
												    r1 = breathSpectrum;
												    print_line("Breathing detected at distance point ", rInd + breathCheckStartPoint, ". Spectrum in r1");
											  }
											  if (numberOfBreathing == 1)
											  {
												    r2 = breathSpectrum;
												    print_line("Breathing detected at distance point ", rInd + breathCheckStartPoint, ". Spectrum in r2");
											  }
											  if (numberOfBreathing == 2)
											  {
												    r3 = breathSpectrum;
												    print_line("Breathing detected at distance point ", rInd + breathCheckStartPoint, ". Spectrum in r3");
											  }
											  if (numberOfBreathing == 3)
											  {
												    //r4 = breathSpectrum;
												    //print_line("Breathing detected at distance point ", rInd, ". Spectrum in r4");
											  }
											  numberOfBreathing = numberOfBreathing + 1;
										}
								      }
							    }
						  }
					}
					else
					{
						  breathSkipIndex = breathSkipIndex + 1;
					}
				}
			}

			targetSignal = averaged;
			prevMin = 0;
			mainMax=max(targetSignal,pos);
			// Print_line(ie,"   ",chNum,"   ",pos,"   ",mainMax);
			requiredLevel = mainMax/4;
			requiredLevel = mainMax*NoiseLevel;
			requiredAmpl = mainMax*dMinLevel;
			requiredRise =  mainMax*MinRise;
			for (ia = 1; ia < pointsToView-2; ia = ia + 1)
			{
				nextIndex = ia + 1;
				prevIndex = ia - 1;
				if (targetSignal[ia] > targetSignal[nextIndex])
				{
					if (targetSignal[ia] > targetSignal[prevIndex])
					{
						if (targetSignal[ia] - targetSignal[prevMin] > requiredAmpl)
						{
							if ((targetSignal[ia] - targetSignal[prevMin])/(ia - prevMin) > requiredRise)
							{
								if(targetSignal[ia]> requiredLevel)
								{
									hitMaximums[ia] =hitMaximums[ia]+1;
								}
							}
						}
					}
				}
				if (targetSignal[ia] < targetSignal[nextIndex])
				{
					if (targetSignal[ia] < targetSignal[prevIndex])
					{
						prevMin = ia;
					}
				}
			}
			set_matrix_row(averagedMat, chNum, averaged);
		}
		r6 = hitMaximums; // hit maximums number point number respons
		Sr3 = hitMaximums; Sr3=0;
		Sr15 = hitMaximums; Sr15=0;

		TagN=0;
		TagU=0;
		scoreMaximums=0; //Point number of Maximums with score > scoreThreshold
		targetsNum=0;
		for (ia = MaximumsDelay; ia < pointsToView; ia = ia + 1)
		{
			if (hitMaximums[ia]<2) {goto early3;}
			currentScore=(hitMaximums[ia-2]+hitMaximums[ia+2])/4+(hitMaximums[ia-1]+hitMaximums[ia+1])/2+hitMaximums[ia];
			if (currentScore >= scoreThreshold )
			{
				scoreMaximums[TagN]=ia;
				TagN=TagN+1;
				//r5[ia]=currentScore;
			}
early3:
		}
		SM=scoreMaximums; //Points numbers of Maximums with score > scoreTreshold
		scoreMaximums=0; //Point numbers of Targets detachment
		for(ib=0; ib<tagN; ib=ib+1)
		{
			in=SM[ib];
			if (hitMaximums[in]>hitMaximums[in-1])
			{
				if(hitMaximums[in]>=hitMaximums[in+1])
				{
					//r4[in]=1; //Moving targets demonstration
					hitTag[in]=hitTag[in]+1;
					scoreMaximums[TagU]=in;
					TagU=TagU+1;
				}
			}
		}
		//out(TagU);             //Moving targets number
		//r2=scoreMaximums; //Point numbers of Targets
		hitM=hitM+hitTag;
		r4 = hitTag; //Moving targets demonstration
		//set_matrix_row(tagMatrix,ie,scoreMaximums);
		//Speed calculations
		if (ie==perFrame-1)
		{

			numOfData= 0;//num of raw detections for current frame
			lastIDused = 0;//global variable to assigng unique ID for each detection, should be incrementd when detection is added to the list
			isUsedData = 0;//assigning false to flags of detections data for tracker to use
			isMatchedData = 0;//assigning false to flags of detections data for tracker to use

			if (TxNum > 1)
			{
				// Now there are (TxNum - 1)*2 signals left before the next 16 cycle
				for (Tx_i = 1; Tx_i < TxNum; Tx_i = Tx_i + 1) //tx switch
				{
					// Tx_i+1 because we are working with 2nd and above tx
					//print_line("Getting the signal from array ", ii + 2 * Tx_i+1);
					s1 = get_matrix_row(ss1, ii + 2 * (Tx_i - 1) +1) / Nor; //acquisition

					// Some processing
					for (i = 0; i < N; i = i + 1)
					{
						ch_1Prev[i] = s1[i * Nch + 0];
						ch_2Prev[i] = s1[i * Nch + 1];
						ch_3Prev[i] = s1[i * Nch + 2];
						ch_4Prev[i] = s1[i * Nch + 3];
						ch_5Prev[i] = s1[i * Nch + 4];
						ch_6Prev[i] = s1[i * Nch + 5];
						ch_7Prev[i] = s1[i * Nch + 6];
						ch_8Prev[i] = s1[i * Nch + 7];
					}

					s1 = get_matrix_row(ss1, ii + 2 * (Tx_i - 1) + 2) / Nor; //acquisition
					for (i = 0; i < N; i = i + 1)
					{
						ch_1[i] = s1[i * Nch + 0];
						ch_2[i] = s1[i * Nch + 1];
						ch_3[i] = s1[i * Nch + 2];
						ch_4[i] = s1[i * Nch + 3];
						ch_5[i] = s1[i * Nch + 4];
						ch_6[i] = s1[i * Nch + 5];
						ch_7[i] = s1[i * Nch + 6];
						ch_8[i] = s1[i * Nch + 7];
					}
					set_matrix_row(difMat, TxMapping[Tx_i]*Nch, ch_1 - ch_1Prev);
					set_matrix_row(difMat, TxMapping[Tx_i]*Nch + 1, ch_2 - ch_2Prev);
					set_matrix_row(difMat, TxMapping[Tx_i]*Nch + 2, ch_3 - ch_3Prev);
					set_matrix_row(difMat, TxMapping[Tx_i]*Nch + 3, ch_4 - ch_4Prev);
					set_matrix_row(difMat, TxMapping[Tx_i]*Nch + 4, ch_5 - ch_5Prev);
					set_matrix_row(difMat, TxMapping[Tx_i]*Nch + 5, ch_6 - ch_6Prev);
					set_matrix_row(difMat, TxMapping[Tx_i]*Nch + 6, ch_7 - ch_7Prev);
					set_matrix_row(difMat, TxMapping[Tx_i]*Nch + 7, ch_8 - ch_8Prev);

					for (chNum = 0; chNum < Nch; chNum = chNum + 1)
					{
						cc1=get_matrix_row(difMat, TxMapping[Tx_i]*Nch + chNum);

						SigZP_1=0;
						Insert(cc1*W,0,N-1,SigZP_1,0);

						spectr_1=fft(sigZP_1)/T;  //Range FFT
						set_window(spectr_1,pointsToView*dT,pointsToView);

						//Should not corrupt TX_pos[0] rows
						set_matrix_row(phaseMat, TxMapping[Tx_i]*Nch + chNum, phase(spectr_1));
					}
				}
			}

			ie=-1;
			ii = ii + (TxNum - 1)*2;
			TagNs=0;
			TagUs=0;
			for (ia = MaximumsDelay; ia < pointsToView; ia = ia + 1)
			{
				if (hitM[ia]==0) {goto early4;}
				//currentScore=(hitTag[ia-2]+hitTag[ia+2])/4+(hitTag[ia-1]+hitTag[ia+1])/2+hitTag[ia];
				currentScore=(hitM[ia-1]+hitM[ia+1])+hitM[ia]+hitM[ia-2]+hitM[ia+2];
				if (currentScore >= TagscoreThreshold )
				{
					scoreMaximums[TagNs]=ia;
					TagNs=TagNs+1; //add to the count of maximums
					Sr3[ia]=currentScore;
				}
early4:
			}
			Out(TagNs);
			//r14=scoreMaximums;
			SM=scoreMaximums; //Points numbers of Maximums with score >= scoreTreshold
			scoreMaximums=0; //Point numbers of Targets detachment
			for(ib=0; ib<tagNs; ib=ib+1)
			{
				in=SM[ib]; // Targets // Targets ranges numbers
				if (Sr3[in]>Sr3[in-1])
				{
					if(Sr3[in]>=Sr3[in+1])
					{
						Sr15[in]=1;
						//hitM[in]=hitM[in]+1;
						scoreMaximums[TagUs]=in;
						TagUs=TagUs+1;
					}
				}
			}
			//Out(TagUs);
			r10=Sr15;  // Moving targets demonstration
			//Pause();
			//r3=Sr3;
			//r16=scoreMaximums;
			r7=hitM;
			hitTag=0;
			hitM=0;
			phMatrixT=transpose(phMatrix);
			phaseMatT=transpose(phaseMat);

			histEntryAz = -1000; // Setting the single row to be entered into a histogram of angles with invalid values
			histEntryEl = -1000; // Setting the single row to be entered into a histogram of angles with invalid values

			Step = frameIndex + 1; //Number of speed calculation cycle
			//Print_line("Ch",CH+1,"   Step=",Step,"  ",ii );
			for(it=0; it<TagUs; it=it+1)
			{
				//Ph2=0;
				rangeNum=scoreMaximums[it];
				R=rangeNum*distperpoint;
				if (throughWall == 1)
				{
					R = R - wallPoint * distPerPoint;
				}
				else
				{
					R = R - startDelay;
				}
				phtagx=get_matrix_row(phMatrixT,rangeNum);
				//set_window(ph1Tag1,perFrame,128);
				Vmag = 0;
				for (chNum = 0; chNum < Nch; chNum = chNum + 1)
				{
					for (kk = 0; kk < perFrame; kk = kk + 1)
					{
						ph1Tag1[kk] = phtagx[kk * Nch + chNum];
					}
					set_label(ph1Tag1,128,"v","m/s)");
					insert(ph1Tag1,0,perFrame-1,Ph2,0);
					K11=fft(WH*(cos(ph2)+j()*sin(ph2))); // Doppler FFT on frame of Phazors
					L11=mag(K11); //L11[0]=L11[1];

					m11=max(L11,pos);
					//out(pos);
					if(pos>dopplerPadding/2)
					{
						Vmag = Vmag + (pos-dopplerPadding)*dvel;  //Negative velocity (Approach)
						//11=push(L11,2*(dopplerPadding-pos));
						set_marker(11,1,dopplerPadding-pos);
					}
					else
					{
						Vmag = Vmag + pos*dvel;   //Positive velocity (Away)
						//r11=L11;
						set_marker(11,1,pos);
					}

					//Print_line("TagNo=",it+1," R=",R," m"," Vmag=",Vmag," m/s");
				}
				Vmag = Vmag / Nch;

				phaseTag1=get_matrix_row(phaseMatT,rangeNum);

				if (Az==1)
				{
					//Rows should be in the correct order by now
					//Should store from 0th element always
					for (txAzCurrent = 0; txAzCurrent < TxAz; txAzCurrent = txAzCurrent + 1)
					{
						insert(phaseTag1, Nch * txAzCurrent, Nch* txAzCurrent + RxAz - 1 , phAz, txAzCurrent * RxAz);
					}
					//r2=phAz;
					set_label(phAz,Azpadding,"v","m/s)");
					//if (it == 0)
					//{
						  //r12=mag(WHaz*(cos(phAz)+j*sin(phAz)));
					//}
					posAz2 = 0;
					posAz1 = 0;
					
					Az16=fft(WHaz1*(cos(phAz)+j*sin(phAz))); //Azimuth FFT on channels Phazors
					L16=mag(Az16);
					m16=max(L16,posAz1);
					
					if (it == 0)
					{
						  r12=L16;
					}
					
					Az16=fft(WHaz2*(cos(phAz)+j*sin(phAz))); //Azimuth FFT on channels Phazors
					L16=mag(Az16);
					m16=max(L16,posAz2);
					
					if (it == 0)
					{
						  r13=L16;
					}
					
					//print_line("Maximum value ", m16, " at point ", posAz);
					//r12=L16;
					//out(posAz);
					if(posAz1 > Azpadding / 2)
					{
						AzAngle1 = Asin((posAz1 - Azpadding) * dsinAz) * 180 / pi();  //Negative velocity (From the left)
					}
					else
					{
						AzAngle1 = Asin(posAz1 * dsinAz) * 180 / pi();   //Positive velocity (From the right)
					}
					
					if(posAz2 > Azpadding / 2)
					{
						AzAngle2 = Asin((posAz2 - Azpadding) * dsinAz) * 180 / pi();  //Negative velocity (From the left)
						//r12=push(L16,2*(Azpadding-posAz));
						set_marker(12,1,Azpadding-posAz2);
					}
					else
					{
						AzAngle2 = Asin(posAz2 * dsinAz) * 180 / pi();   //Positive velocity (From the right)
						//r12=L16;
						set_marker(12,1,posAz2);
					}
					
					AzAngle = AzAngle2;
					
					if (abs(AzAngle2 - AzAngle1) > requiredAngleSimilarity)
					{
						  print_line("Target ", it, " dropped due to mismatch in az for different antennas (", AzAngle1, " vs ", AzAngle2, ") at R=", R);
						  goto skiptarget;
					}
					//Print_line(" Az=",AzAngle," deg");
				}
				else
				{
					AzAngle = 0;
				}
				histEntryAz[rangeNum] = AzAngle;

				// Splash the detection to neighboring ranges
				histEntryAz[rangeNum - 1] = AzAngle;
				histEntryAz[rangeNum + 1] = AzAngle;

				if (El==1)
				{
					//tx1 is used for the elevation, it is always stored at the second 8ch region
					phEl[0] = phaseTag1[Nch + 5];
					phEl[1] = phaseTag1[Nch + 2];
					phEl[2] = phaseTag1[Nch + 6];
					phEl[3] = phaseTag1[Nch + 7];

					if (TxEl > 1)
					{
						//If there are two el txes, this second is in the last (4th) 8ch region
						phEl[4] = phaseTag1[3 * Nch + 5];
						phEl[5] = phaseTag1[3 * Nch + 2];
						phEl[6] = phaseTag1[3 * Nch + 6];
						phEl[7] = phaseTag1[3 * Nch + 7];
					}

					//r1=phEl;
					posEl1 = 0;
					posEl2 = 0;
					set_label(phEl,Elpadding,"v","m/s)");
					El16=fft(WHel1*(cos(phEl)+j*sin(phEl))); //Elevation FFT on channels Phazors
					L16=mag(El16);
					m16=max(L16,posEl1);
					
					
					El16=fft(WHel2*(cos(phEl)+j*sin(phEl))); //Elevation FFT on channels Phazors
					L16=mag(El16);
					m16=max(L16,posEl2);
					
					//if (it == 0)
					//{
					//	r12=PhEl;
					//}
					//out(posEl);
					if(posEl1 > Elpadding / 2)
					{
						ElAngle1=asin((posEl1 - Elpadding) * dsinEl) * 180 / pi();  //Negative velocity (From the bottom)
						//r12=push(L16,2*(Elpadding-posAz));
						//set_marker(12,1,Elpadding-posAz);
					}
					else
					{
						ElAngle1=asin(posEl1 * dsinEl) * 180 / pi();   //Positive velocity (From the right)
						//r12=L16;
						//set_marker(12,1,posEl);
					}
					if(posEl2 > Elpadding / 2)
					{
						ElAngle2=asin((posEl2 - Elpadding) * dsinEl) * 180 / pi();  //Negative velocity (From the bottom)
					}
					else
					{
						ElAngle2=asin(posEl2 * dsinEl) * 180 / pi();   //Positive velocity (From the right)
					}
					
					if (abs(ElAngle2 - ElAngle1) > requiredAngleSimilarity)
					{
						  print_line("Target ", it, " dropped due to mismatch in el for different antennas (", ElAngle1, " vs ", ElAngle2, ") at R=", R);
						  goto skiptargett;
					}
					ElAngle = ElAngle2;
					
					//r12=L16;
					set_marker(12,1,posEl2);
					//Print_line(" El=",ElAngle," deg");
					
					skiptargett:
				}
				else
				{
					ElAngle = 0;
				}
				histEntryEl[rangeNum] = ElAngle;

				// Splash the detection to neighboring ranges
				histEntryEl[rangeNum - 1] = ElAngle;
				histEntryEl[rangeNum + 1] = ElAngle;

				print_line(Step, ", ", it + 1, ", ", R, ", ", Vmag, ", ", AzAngle, ", ", ElAngle, ",");

				//data for tracking
				rData[numOfData] = R;
				vData[numOfData] = Vmag;
				aData[numOfData] = AzAngle;
				eData[numOfData] = ElAngle;
				idsData[numOfData] = lastIDused;

				lastIDused = lastIDused + 1;
				if (numOfData + 1 < maxData)
				{
					numOfData= numOfData + 1;
				}
				//data for tracking is updated
				
				skiptarget:
			}
			
			if (checkBreathing)
			{
			      breathAmplitudes = 0;
			      for(rInd = breathCheckStartPoint; rInd <= breathCheckEndPoint; rInd = rInd + 1)
			      {
					R= rInd * distperpoint;
					if (throughWall == 1)
					{
						  R = R - wallPoint * distPerPoint;
					}
					else
					{
						  R = R - startDelay;
					}
					phtagx = get_matrix_row(phMatrixT,rInd);

					for (chNum = 0; chNum < Nch; chNum = chNum + 1)
					{
						  for (kk = 0; kk < perFrame; kk = kk + 1)
						  {
							  ph1Tag1[kk] = phtagx[kk * Nch + chNum];
						  }
						  set_label(ph1Tag1,128,"v","m/s)");
						  insert(ph1Tag1,0,perFrame-1,Ph2,0);
						  K11=fft(WH*(cos(ph2)+j()*sin(ph2))); // Doppler FFT on frame of Phazors
						  L11=mag(K11); //L11[0]=L11[1];
					  
						  indexInBreath = rInd - breathCheckStartPoint;
						  breathAmplitudes[indexInBreath] = breathAmplitudes[indexInBreath] + L11[1];
					}
			      }
			      
			      //Shifting previous breathing amplitude by one in slow time dimension
			      for (bInd = breathingPeriod - 1; bInd > 0; bInd = bInd - 1)
			      {
					set_matrix_row(breathMat, bInd, get_matrix_row(breathMat, bInd-1));
			      }
			      //Rewriting 1st row with the latest data
			      set_matrix_row(breathMat, 0, breathAmplitudes);

			      //Transpose to calculate FFT along the slow time axis for each distance
			      breathMatTransposed = transpose(breathMat);
			      //draw(breathMatTransposed);
			      
			      //Resetting the signal, in which we will keep spectrum maximums for all potential breathing points
			      spectrumMaximums = 0;

			      for(rInd = 0; rInd < checkBreathingPoints; rInd = rInd + 1)
			      {
					//The amplitude distribution of the breathing on the slow time axis
					breathSlowTime = get_matrix_row(breathMatTransposed, rInd);
					
					if (rInd == 14)
					{
						  set_label(breathSlowTime, breathingWindow, "s", "mV");
						  //r16 = breathSlowTime; // For debugging
					}
					
					//To not have the garbage after the FFT need to set some time window
					set_label(breathSlowTime, breathingWindow, "s", "mV");
					
					//Breathing spectrum, 1000 is arbitrary multiplier to have values in the convenient range
					breathSpectrum = 1000*mag(fft(breathSlowTime));
					
					//The proper labels and the scale
					set_label(breathSpectrum, 1/breathingWindow*(breathingPeriod/2+1), "Hz", "mV");
					
					pos = 0;
					currentMaxValue = max(breathSpectrum, pos);

					//This is current policy of describing, what is the breathing spectrum
					if (pos > 0) //not a zero frequency 
					{
						  sharpDropValue = 1;
						  limit = pos - 2;
						  if (limit < 0)
						  {
							    limit = 0;
						  }
						  for (dropInd = pos; dropInd >= limit; dropInd = dropInd - 1)
						  {
							    if (breathSpectrum[dropInd] < sharpDropValue*currentMaxValue)
							    {
								      sharpDropValue = breathSpectrum[dropInd]/currentMaxValue;
							    }
						  }
						  if (sharpDropValue > 0.65)
						  {
							    limit = pos + 2;
							    if (limit >= breathingPeriod/2 + 1)
							    {
								      limit = breathingPeriod/2;
							    }
							    for (dropInd = pos; dropInd <= limit; dropInd = dropInd + 1)
							    {
								      if (breathSpectrum[dropInd] < sharpDropValue*currentMaxValue)
								      {
										sharpDropValue = breathSpectrum[dropInd]/currentMaxValue;
								      }
							    }
						  }
						  if (sharpDropValue < 0.65)
						  {
							    //Store this point, it could be local maximum along the distance axis
							    //We don't know that untill all points around all checked
							    spectrumMaximums[rInd] = currentMaxValue;
						  }

					}
			      }
			      //Now we can display the current breathing spectrum maximums distribution
			      //r16 = spectrumMaximums;
			}

			//Kalman filter based tracking update
			(newLastTrackId) = tracking_process_with_doppler_el(timestamps, states, covariances, thresholds, ages, numOfTracks, maxTracks, rData, aData, eData, vData, isUsedData, isMatchedData, idsData, numOfData, currentTime, idsTracks, lastTrackId);
			//print_line("Number of tracks after update ", numOfTracks);
			lastTrackId = newLastTrackId;

			memoryUpdatedFlags = 0;
			for (tr = 0; tr < numOfTracks; tr = tr + 1)
			{
				traceNum = -1;
				traceFound = false;
				for (trace = 0; trace < curNumOfTraces; trace = trace + 1)
				{
					//print_line("Checking the existence of a trace with ID ", idsTracks[tr], ". Current trace ID ", idsInMemory[trace]);
					if (idsTracks[tr] == idsInMemory[trace])
					{
						  traceNum = trace;
						  traceFound = true;
						  memoryUpdatedFlags[trace] = 1;
						  //print_line("Trace found");
					}
				}
				if (thresholds[tr]/ages[tr] > trueTrackThreshold)
				{
					//print_line("Track didn't pass by precision ", thresholds[tr]);
					//print_line("Track ID=", idsdata[tr], ", R=", x11[tr], ", v=", x21[tr], ", az=", x31[tr], ", inactive, error value=", thresholds[tr]);
					goto endofloop;
				}

				//measured qualities
				range = get_matrix(states, tr, 0);
				velocity = get_matrix(states, tr, 1);
				azimuth = get_matrix(states, tr, 2);
				elevation = get_matrix(states, tr, 4);

				xtrack = range * sin(azimuth * pi() / 180) * cos(elevation * pi() / 180); //along az
				ytrack = range * cos(azimuth * pi() / 180) * sin(elevation * pi() / 180); //along el
				ztrack = range * cos(azimuth * pi() / 180) * cos(elevation * pi() / 180); //from the radar

				//derived qualities
				dTh = get_matrix(states, tr, 3) * pi()/180;
				dEl = get_matrix(states, tr, 5) * pi()/180;

				vx = velocity * sin(azimuth* pi() / 180) + range*dTh * cos(azimuth * pi() / 180);
				vy = velocity * sin(elevation* pi() / 180) + range*dEl * cos(elevation * pi() / 180);
				vz = velocity * cos(azimuth* pi() / 180) * cos(elevation * pi() / 180) - range*dTh * sin(azimuth * pi() / 180)*dEl * sin(elevation * pi() / 180);
				//old
				//vx = velocity * sin(azimuth* pi() / 180) + range*dTh * cos(azimuth * pi() / 180);
				//vy = velocity * cos(azimuth* pi() / 180) - range*dTh * sin(azimuth * pi() / 180);

				vel = sqrt(vx*vx + vy*vy + vz*vz);


				if (vel < minVel)
				{
					//print_line("Track ID=", idsTracks[tr], ", R=", x11[tr], ", v=", x21[tr], ", az=", x31[tr], ", inactive, error value=", thresholds[tr]);
					goto endofloop;
				}

				if (vel > maxVel)
				{
					//print_line("Track ID=", idsTracks[tr], ", R=", x11[tr], ", v=", x21[tr], ", az=", x31[tr], ", inactive, error value=", thresholds[tr]);
					goto endofloop;
				}

				if (ages[tr] < minAgeToDisplayRadial)
				{
					//print_line("Track ID=", idsTracks[tr], ", R=", x11[tr], ", v=", x21[tr], ", az=", x31[tr], ", inactive, error value=", thresholds[tr]);
					goto endofloop;
				}

				//tangental only movement can be easily faked by several stationary reflections, so should be registered after more updates
				if (abs(velocity) < 0.5*range*tan(azimuth*pi()/180)*tan(elevation*pi()/180))//tangental movement is twice faster than radial
				{
					if (ages[tr] < minAgeToDisplayTangental)
					{
						//print_line("Track ID=", idsTracks[tr], ", R=", x11[tr], ", v=", x21[tr], ", az=", x31[tr], ", inactive, error value=", thresholds[tr]);
						goto endofloop;
					}
				}
				//print_line("Have valid track at position ", x, ", ", y, " and velocity ", vx, ", ", vy);
				print_line("Step=", Step, ", Track ID=", idsTracks[tr], ", R=", range, ", v=", velocity, ", az=", azimuth, ", el=", elevation,", active, error value=", thresholds[tr]);
				print_line("In Cartesian: ", xtrack, " ", ytrack, " ", ztrack);
				meanRValue = 0;
				meanVValue = 0;
				meanAzValue = 0;
				meanElValue = 0;
				measuredTimes = 0;

				if (traceFound)
				{
					//Memory update
					currentRHistory = get_matrix_row(rHistory, traceNum);
					currentVHistory = get_matrix_row(vHistory, traceNum);
					currentAzHistory = get_matrix_row(azHistory, traceNum);
					currentElHistory = get_matrix_row(elHistory, traceNum);
						  
					for (memNum = measurementsInMemory[traceNum]; memNum > 0; memNum = memNum - 1) // Does not go to 0
					{	    
						currentRHistory[memNum] = currentRHistory[memNum - 1];
						currentVHistory[memNum] = currentVHistory[memNum - 1];
						currentAzHistory[memNum] = currentAzHistory[memNum - 1];
						currentElHistory[memNum] = currentElHistory[memNum - 1];
					}
					currentRHistory[0] = range;
					currentVHistory[0] = velocity;
					currentAzHistory[0] = azimuth;
					currentElHistory[0] = elevation;
					  
					if (measurementsInMemory[traceNum] < coordMemorySize)
					{
						measurementsInMemory[traceNum] = measurementsInMemory[traceNum] + 1;
					}
					
					for (memNum = 0; memNum < measurementsInMemory[traceNum]; memNum = memNum + 1)
					{
						//print_line("Adding ", currentRHistory[memNum], " to the mean.");
						meanRValue = meanRValue + currentRHistory[memNum];
						meanVValue = meanVValue + currentVHistory[memNum];
						meanAzValue = meanAzValue + currentAzHistory[memNum];
						meanElValue = meanElValue + currentElHistory[memNum];
					}
					measuredTimes = measurementsInMemory[traceNum];
					meanRValue = meanRValue / measuredTimes;
					meanVValue = meanVValue / measuredTimes;
					meanAzValue = meanAzValue / measuredTimes;
					meanElValue = meanElValue / measuredTimes;
						  
					set_matrix_row(rHistory, traceNum, currentRHistory);
					set_matrix_row(vHistory, traceNum, currentVHistory);
					set_matrix_row(azHistory, traceNum, currentAzHistory);
					set_matrix_row(elHistory, traceNum, currentElHistory);

					goto aftertraces; // break
				}

aftertraces:
				if (traceFound) // Just display the result of the averaging
				{
					print_line("Step=", Step, ", Track ID=", idsInMemory[traceNum], ", Averaged values: R=", meanRValue, ", v=", meanVValue, ", az=", meanAzValue, ", el=", meanElValue, ". Calculated from ", measuredTimes, " measurements.");
				}
				else
				{
					// This is a new trace
					if (curNumOfTraces < maxNumOfTraces)
					{
						  currentRHistory = get_matrix_row(rHistory, curNumOfTraces);
						  currentVHistory = get_matrix_row(vHistory, curNumOfTraces);
						  currentAzHistory = get_matrix_row(azHistory, curNumOfTraces);
						  currentElHistory = get_matrix_row(elHistory, curNumOfTraces);
						  
						  // Reset whatever was there
						  currentRHistory = 0;
						  currentVHistory = 0;
						  currentAzHistory = 0;
						  currentElHistory = 0;
						  
						  //Add the only valid measurement
						  currentRHistory[0] = range;
						  currentVHistory[0] = velocity;
						  currentAzHistory[0] = azimuth;
						  currentElHistory[0] = elevation;
						  
						  set_matrix_row(rHistory, curNumOfTraces, currentRHistory);
						  set_matrix_row(vHistory, curNumOfTraces, currentVHistory);
						  set_matrix_row(azHistory, curNumOfTraces, currentAzHistory);
						  set_matrix_row(elHistory, curNumOfTraces, currentElHistory);
						  
						  measurementsInMemory[curNumOfTraces] = 1;
						  memoryUpdatedFlags[curNumOfTraces] = 1;
						  idsInMemory[curNumOfTraces] = idsTracks[tr];
						  curNumOfTraces = curNumOfTraces + 1;
						  print_line("This is the first measurement for this track ID. Mean values match current values.");
					}
				}
endofloop:
				//print_line("end of loop");
			}
			
			// Need to remove traces of tracks which were already deleted
			trace = 0;
			while (trace < curNumOfTraces)
			{
				if (memoryUpdatedFlags[trace] < 1)
				{
					print_line("Removing the trace with ID ", idsInMemory[trace]);
					set_matrix_row(rHistory, trace, get_matrix_row(rHistory, curNumOfTraces - 1));
					set_matrix_row(vHistory, trace, get_matrix_row(vHistory, curNumOfTraces - 1));
					set_matrix_row(azHistory, trace, get_matrix_row(azHistory, curNumOfTraces - 1));
					set_matrix_row(elHistory, trace, get_matrix_row(elHistory, curNumOfTraces - 1));
					
					measurementsInMemory[trace] = measurementsInMemory[curNumOfTraces - 1];
					curNumOfTraces = curNumOfTraces - 1;
				}
				else
				{
					trace = trace + 1;
				}
			}

			currentTime = currentTime + perFrame*(T+P)/1000; //T+P should be approx. 11 ms with current implementation
			//print_line("Current tracker time is ", currentTime, " s");

			for (histInd = 1; histInd < breathingHistSamples; histInd = histInd + 1)
			{
				set_matrix_row(histogramMatAz, histInd - 1, get_matrix_row(histogramMatAz, histInd));
				set_matrix_row(histogramMatEl, histInd - 1, get_matrix_row(histogramMatEl, histInd));
			}
			set_matrix_row(histogramMatAz, breathingHistSamples - 1, histEntryAz);
			set_matrix_row(histogramMatEl, breathingHistSamples - 1, histEntryEl);

			if (TagUs > 0) // There was a new entry
			{
				histogramMatAzT = transpose(histogramMatAz);
				histogramMatElT = transpose(histogramMatEl);
				for(it=0; it<TagUs; it=it+1)
				{
					//print_line("");
					//print_line("Target number ", it);
					//print_line("azimuth hist:");
					rangeNum=scoreMaximums[it];
					R=rangeNum*distperpoint;
					if (throughWall == 1)
					{
						R = R - wallPoint * distPerPoint;
					}
					else
					{
						R = R - startDelay;
					}
					histAz = 0;
					histEl = 0;
					// Azimuth from the histogram
					histEntry = get_matrix_row(histogramMatAzT, rangeNum);
					validEntries = 0;
					for (ih = 0; ih < breathingHistSamples; ih = ih + 1)
					{
						if (histEntry[ih] < -999) // Invalid entry
						{
							goto nexthistaz;
						}
						if (abs(histEntry[ih]) > azHistMaxAngle) // Outside of the estimation range
						{
							goto nexthistaz;
						}

						histIndex = floor((histEntry[ih] + azHistMaxAngle)/azHistStep + 0.5);
						histAz[histIndex] = histAz[histIndex] + 1;
						//print_line("Adding to the az histogram at ", histIndex);
						validEntries = validEntries + 1;

nexthistaz:
					}
					posAz = -1000;
					posEl = -1000;
					if (validEntries > breathingHistRequired)
					{
						val = max(histAz, posAz);
					}

					//print_line("elevation hist:");
					// Elevation from the histogram
					histEntry = get_matrix_row(histogramMatElT, rangeNum);
					validEntries = 0;
					for (ih = 0; ih < breathingHistSamples; ih = ih + 1)
					{
						if (histEntry[ih] < -999) // Invalid entry
						{
							goto nexthistel;
						}
						if (abs(histEntry[ih]) > elHistMaxAngle) // Outside of the estimation range
						{
							goto nexthistel;
						}

						histIndex = floor((histEntry[ih] + elHistMaxAngle)/elHistStep + 0.5);
						histEl[histIndex] = histEl[histIndex] + 1;
						//print_line("Adding to the el histogram at ", histIndex);
						validEntries = validEntries + 1;

nexthistel:
					}

					if (validEntries > breathingHistRequired)
					{
						val = max(histEl, posEl);
					}

					if ((posAz > -1000) and (posEl > -1000))
					{
						print_line("Step=", Step, ", Immobile detected at R=", R, ", V=", 0, ", az=", posAz*azHistStep - azHistMaxAngle, ", el=",  posEl*elHistStep - elHistMaxAngle);
					}
				}
			}

			//pause();
		}

		//pause();
		ie = ie + 1;
	}
}//end of frame acquisition
t2=time();
tM=t2-t1;
Out(tM);
justend:

dummy = 0;
